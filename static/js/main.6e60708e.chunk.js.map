{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["ScriptCache","src","cb","Promise","resolve","reject","resolved","errored","body","document","getElementsByTagName","tag","createElement","type","async","onreadystatechange","handleLoad","handleReject","state","readyState","evt","addEventListener","appendChild","ReactDOM","render","React","getElementById","App","class","charset","id","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode"],"mappings":"gMA2BQA,E,yFAEF,SAAUC,EAAKC,GACf,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAIC,GAAW,EACXC,GAAU,EACVC,EAAOC,SAASC,qBAAqB,QAAQ,GAC7CC,EAAMF,SAASG,cAAc,UAEjCD,EAAIE,KAAO,kBACXF,EAAIG,OAAQ,EAEWH,EAAII,mBAAqB,WAC9C,GAAIT,EAAU,OAAOU,IACrB,GAAIT,EAAS,OAAOU,IACpB,IAAMC,EAAQP,EAAIQ,WACJ,aAAVD,EACFF,IACmB,UAAVE,GACTD,KAPJ,IAWMD,EAAa,SAACI,GAASd,GAAW,EAAKF,EAAQH,IAC/CgB,EAAe,SAACG,GAASb,GAAU,EAAMF,EAAOJ,IAMtD,OAJAU,EAAIU,iBAAiB,OAAQL,GAC7BL,EAAIU,iBAAiB,QAASJ,GAC9BN,EAAIV,IAAMA,EACVO,EAAKc,YAAYX,GACVA,S,KAKbY,IAASC,OAAqBC,IAAMb,cAAcZ,EAAa,MAAOS,SAASiB,eAAe,SAEjFC,MA7Df,WACI,OACE,sBAAKC,MAAM,oCAAX,UACA,yBAAQA,MAAM,cAAd,UACE,iDACA,sBAAMA,MAAM,sBAAZ,oCACA,sBAAMC,QAAQ,UACd,qDAEF,uBAAMD,MAAM,cAAZ,UACE,4BAAYE,GAAG,UACf,sBAAKF,MAAM,QAAX,UACE,mBAAGG,KAAK,IAAID,GAAG,cAAcF,MAAM,MAAnC,uBACA,sBAAME,GAAG,wBAIb,wBAAQF,MAAM,cAAd,SACE,oBAAGA,MAAM,cAAT,sDAAgE,mBAAGG,KAAK,2BAA2BH,MAAM,OAAOI,OAAO,SAASC,IAAI,aAApE,2BAAhE,iHCTOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCDdZ,IAASC,OACL,cAAC,IAAMmB,WAAP,UACE,cAAC,EAAD,MAEFlC,SAASiB,eAAe,SAK5BQ,M","file":"static/js/main.6e60708e.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nfunction App() {\r\n    return (\r\n      <div class=\"wrapper quote-machine border blue\">\r\n      <header class=\"border blue\">\r\n        <h1>Quote Generator</h1>\r\n        <span class=\"version border blue\">ver:   1.3.9.3.9.1.3.3</span>\r\n        <meta charset=\"UTF-8\" />\r\n        <title>Quote Machine</title>\r\n      </header>\r\n      <main class=\"border blue\">\r\n        <blockquote id=\"quote\"></blockquote>\r\n        <div class=\"block\">\r\n          <a href=\"#\" id=\"newQuoteBtn\" class=\"btn\">New Quote</a>\r\n          <span id=\"tweet-wrapper\">\r\n          </span>\r\n        </div>\r\n      </main>\r\n      <footer class=\"border blue\">\r\n        <p class=\"page-author\">I'm a cloned character of the primordial <a href=\"https://maharanirach.com\" class=\"link\" target=\"_blank\" rel=\"noreferrer\">Maharani Rach</a>, being controlled inside a simulation game played by an alien kid from some other parallel universe.</p>\r\n      </footer>\r\n    </div>\r\n    )\r\n  }\r\n\r\n  class ScriptCache {\r\n    // ...\r\n      scriptTag(src, cb) {\r\n      return new Promise((resolve, reject) => {\r\n        let resolved = false,\r\n            errored = false,\r\n            body = document.getElementsByTagName('body')[0],\r\n            tag = document.createElement('script');\r\n  \r\n        tag.type = 'text/javascript';\r\n        tag.async = false; // Load in order\r\n  \r\n        const handleCallback = tag.onreadystatechange = function() {\r\n          if (resolved) return handleLoad();\r\n          if (errored) return handleReject();\r\n          const state = tag.readyState;\r\n          if (state === 'complete') {\r\n            handleLoad()\r\n          } else if (state === 'error') {\r\n            handleReject()\r\n          }\r\n        }\r\n  \r\n        const handleLoad = (evt) => {resolved = true;resolve(src);}\r\n        const handleReject = (evt) => {errored = true; reject(src) }\r\n  \r\n        tag.addEventListener('load', handleLoad)\r\n        tag.addEventListener('error', handleReject);\r\n        tag.src = src;\r\n        body.appendChild(tag);\r\n        return tag;\r\n      });\r\n    }\r\n  }\r\n  \r\n  ReactDOM.render( /*#__PURE__*/React.createElement(ScriptCache, null), document.getElementById(\"root\"));  \r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport './App.css';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n  );\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n\r\n"],"sourceRoot":""}